#include<iostream>
using namespace std;
#define size 10

class hashtable
{
private: int hashtb[size],i,flagtb[size],key,loc;
public:
hashtable()
{
for(i=0;i<size;i++)
{flagtb[i]=0;}
}




void insert()
{
cout<<"Enter key:";
cin>>key;
loc=key%size;
for( i=0;i<10;i++)
{
if(flagtb[loc]==0)
{
hashtb[loc]=key;
flagtb[loc]=1;
break;
}
else
{
if(isfull())
{cout<<"Hashtable is full. Cannot enter keys anymore."; return;}
else
loc=(loc+1)%size;
}

}
}





void display()
{for(i=0;i<size;i++)
{
if(flagtb[i]!=0){cout<<"Location "<<i<<":"<<hashtb[i]<<endl;}
else{cout<<"Location "<<i<<":--"<<endl;}
}
}



void search()
{
cout<<"Enter Key"<<endl;
cin>>key;
loc=key%size;
int flag=0;
for(i=0;i<size;i++)
{
if(hashtb[i]==key) {cout<<"Element found"<<endl;flag=1;}
//return;
}
if(flag==0) cout<<"Element not found";
}





int isfull()
{
int count=0;
for(i=0;i<1;i++)
{for(int j=0;j<size;j++)
{if(flagtb[j]==flagtb[i])
 count++;
}
}
if(count==10) return 1;
return 0;
}






};



int main(){
hashtable pb;
cout<<"Program for Linear Probing"<<endl;
while(true)
{
cout<<"Enter choice to perform the operation"<<endl;
cout<<"1.Insert\n2.Search\n3.Display\n4.Exit"<<endl; 
int choice;
cin>>choice;

switch(choice){
case 1: pb.insert();
break;

case 2: pb.search();
break;

case 3: pb.display();
break;

case 4:
cout<<"Thank you for using our program";
exit(0);

default : 
cout<<"Enter valid choice";









}
}
}
